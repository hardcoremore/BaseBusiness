<?xml version="1.0" encoding="utf-8"?>
<ui:SkinBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		xmlns:NavBars="com.desktop.ui.Components.NavBars.*"
		xmlns:Button="com.desktop.ui.Components.Button.*"
		xmlns:Library="com.desktop.system.Application.Library.*"
		creationComplete="creationCompleteHandler(event)"
		xmlns:ui="com.desktop.system.Application.Library.ui.*">
	
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("com.desktop.ui.Components.NavBars.TaskBar")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.desktop.ui.Components.NavBars.TaskBar;
			
			import mx.events.FlexEvent;
			import mx.graphics.shaderClasses.SaturationShader;
			
			import spark.layouts.HorizontalLayout;
			import spark.layouts.VerticalLayout;
			
			
			public var trayIcon:Class;
			
			private var _date:Date = new Date();
			
			private var _timer:Timer;
			
			private function onTimer(event:TimerEvent):void
			{
				_date = new Date();
				
				var h:String = _date.hours.toString();
				var m:String = _date.minutes.toString();
				
				if( h.length == 1 ) h = '0' + h;
				if( m.length == 1 ) m = '0' + m;

				clock.label =  h + " : " + m;
			}
			
			private function onTimerComplete(event:TimerEvent):void
			{
				_timer.reset();
				_timer.start();
			}

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_timer= new Timer(1000, 10000000);
				_timer.addEventListener(TimerEvent.TIMER, onTimer);
				_timer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);
				_timer.start();
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				var tb:TaskBar = hostComponent;
				
				if( getStyle( "orientation" ) == TaskBar.HORIZONTAL_ORIENTATION )
				{
					
					startMenuButton.x =  startMenuSpacer.width;
					startMenuButton.y = height / 2 - startMenuButton.height / 2;
					
					startMenuSpacer.x = startMenuButton.x + startMenuButton.width;
					startMenuSpacer.y = 0;

					buttonBar.x = startMenuSpacer.x + startMenuSpacer.width;
					buttonBar.y = 0;
					
				
					minimizeAllWindowsButton.x = width - minimizeAllWindowsButton.width;
					minimizeAllWindowsButton.y = 0;
					
					clock.x = minimizeAllWindowsButton.x - clock.measuredWidth - 5;
					clock.y = tb.height / 2 - clock.measuredHeight / 2;
					
					trayButton.x = clock.x - trayButton.width - 5;
					trayButton.y = tb.height / 2  - trayButton.height / 2;
					
				}
				else if( getStyle( "orientation" ) == TaskBar.VERTICAL_ORIENTATION )
				{ 
					
					startMenuButton.x = width / 2 - startMenuButton.width / 2;
					startMenuButton.y = startMenuSpacer.height ;
					
					startMenuSpacer.x = 0;
					startMenuSpacer.y = startMenuButton.y + startMenuButton.height;
	
					buttonBar.x = 0;
					buttonBar.y = startMenuSpacer.height + startMenuSpacer.y;
					
					minimizeAllWindowsButton.x = 0;
					
					minimizeAllWindowsButton.y = tb.height - minimizeAllWindowsButton.height;
					
					clock.x = tb.width / 2 - clock.measuredWidth / 2;
					clock.y = minimizeAllWindowsButton.y - clock.measuredHeight - 5;
					
					trayButton.x = hostComponent.width / 2 - trayButton.width / 2;
					trayButton.y = clock.y - trayButton.height - 5;
					
					
				}
				
			}
			
			override protected function measure():void
			{
				super.measure();
				
				if( getStyle( "orientation" ) == TaskBar.HORIZONTAL_ORIENTATION )
				{
					taskBarFillGradientOverlay.rotation = 270;
					
					startMenuSpacer.height = 1;
					startMenuSpacer.width = 10;
					
					var bmw:Number = width - startMenuButton.measuredWidth + startMenuButton.x;
						bmw -= clock.measuredWidth + trayButton.measuredWidth;
						bmw -= startMenuSpacer.width * 2;
					
					buttonBar.buttonBarHolder.maxWidth =  bmw - 100;  
					buttonBar.buttonBarHolder.maxHeight= undefined;
					
					minimizeAllWindowsButton.height = height;
					minimizeAllWindowsButton.width = 18;
					
				}
				else if( getStyle( "orientation" ) == TaskBar.VERTICAL_ORIENTATION )
				{
					taskBarFillGradientOverlay.rotation = 180;
					
					startMenuSpacer.height = 10;
					startMenuSpacer.width = 1;
					
					
					var bmh:Number = height - startMenuButton.measuredHeight + startMenuButton.y;
						bmh -= clock.measuredHeight + trayButton.measuredHeight;
						bmh -= startMenuSpacer.height * 2;
					
					buttonBar.buttonBarHolder.maxHeight =  bmh - 100;
					buttonBar.buttonBarHolder.maxWidth = undefined;
					
					minimizeAllWindowsButton.width = width;
					minimizeAllWindowsButton.height = 20;
					
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Rect id="stroke" width="100%" height="100%" alpha="1">
		<s:stroke>
			<s:SolidColorStroke alpha="{getStyle( 'backgroundAlpha' )}" color="#FFFFFF" weight="1"/>
		</s:stroke>
	</s:Rect>
	
	<s:Rect id="taskBarFill" width="100%" height="100%" alpha="{getStyle( 'backgroundAlpha' ) }">
		<s:fill>
			<s:SolidColor color="{ getStyle( 'backgroundColor' ) }" />
		</s:fill>
		
	</s:Rect>

	<s:Rect id="taskBarFillOverlay" width="100%" height="100%" alpha=".4">
		<s:fill>
			<s:LinearGradient id="taskBarFillGradientOverlay" rotation="270">
				<s:GradientEntry color="#000000" alpha="1" />
				<s:GradientEntry color="#FFFFFF" alpha="1" />
			</s:LinearGradient>
		</s:fill>
		
	</s:Rect>
	
	<s:Group id="defaultGroup">
		
		<Button:DesktopControllButton id="startMenuButton" iconWidth="{ getStyle( 'thickness' ) }" iconHeight="{ getStyle( 'thickness' ) }"
				  					  skinClass="{ resourceManager.getClass( this.session.config.LOCALE_CONFIG.skinsResourceName, 'desktopButton', this.session.skinsLocaleName ) }"
				 					  icon="{ resourceManager.getClass( this.session.config.LOCALE_CONFIG.systemIconsResourceName, 'startButtonIcon', this.session.skinsLocaleName ) }"/>
		
		<s:Spacer id="startMenuSpacer" />
		
		<NavBars:DesktopButtonBar id="buttonBar" orientation="{ getStyle( 'orientation' ) }" thickness="{ getStyle( 'thickness' ) }"
								  skinClass="{ resourceManager.getClass( this.session.config.LOCALE_CONFIG.skinsResourceName, 'desktopButtonBar', this.session.skinsLocaleName ) }"/>
		
		<s:Button id="trayButton" 
				  width="35" 
				  height="20" 
				  skinClass="spark.skins.spark.ButtonSkin"/>
		
		<s:Button id="clock" 
				  fontSize="16" 
				  skinClass="skins.Default.components.NavBars.TaskBarClockSkin"/>
		
		<s:Button id="minimizeAllWindowsButton" 
				  cornerRadius="0"
				  alpha=".8"
				  toolTip="{resourceManager.getString( this.session.config.LOCALE_CONFIG.dictonaryResourceName, 'showDesktop' )}" />
		
	</s:Group>
	
</ui:SkinBase>
